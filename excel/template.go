package excel

import (
	"bytes"
	"go/format"
	"text/template"

	"github.com/huandu/xstrings"
)

func genStruct(sheet *Sheet, packageName string, shouldFieldDisplay func(*Field) bool, intType string) (output []byte, err error) {
	var tpl *template.Template
	tmpl := `
package {{.PackageName}}

// {{capitalize .Name}} is auto-generated struct
// Reference file {{.FileName}}.
// DO NOT EDIT THIS FILE MANUALLY
// This file is generated by github.com/8liang/kit/excel

type {{capitalize .Name}}Tpl struct {
{{- range .Fields }}
	{{- if visible . }}
	{{- $field := . }}
	{{- if eq .Type "array" }}
		{{- with index .SubFields 0 }}
	{{capitalize $field.Name}} []{{resolveType .Type}} {{json $field.Name}}
		{{- end }}
	{{- else if eq .Type "objectArray" }}
	{{capitalize .Name}} []struct {
	{{- range .SubFields }}
		{{- if visible . }}
		{{capitalize .Name}} {{resolveType .Type}} {{json .Name}}
		{{- end }}
	{{- end}}
	} {{json .Name}}
	{{- else }}
	{{capitalize .Name}} {{resolveType .Type}} {{json .Name}}
	{{- end }}
	{{- end}}
{{- end }}
}


{{/* 方法生成区 */}}
{{- $structName := printf "%sTpl" (capitalize .Name) }}

{{- range .Fields }}
	{{- if visible . }}
	{{- $field := . }}
	{{- if eq .Type "array" }}
		{{- with index .SubFields 0 }}
// Get{{capitalize $field.Name}} returns {{json $field.Name}}
func (t *{{$structName}}) Get{{capitalize $field.Name}}() []{{resolveType .Type}} {
	if t == nil {
		return nil
	}
	return t.{{capitalize $field.Name}}
}
		{{- end }}
	{{- else if eq .Type "objectArray" }}
// Get{{capitalize .Name}} returns {{json .Name}}
func (t *{{$structName}}) Get{{capitalize .Name}}() []struct {
	{{- range .SubFields }}
		{{- if visible . }}
		{{capitalize .Name}} {{resolveType .Type}} {{json .Name}}
		{{- end }}
	{{- end }}
} {
	if t == nil {
		return nil
	}
	return t.{{capitalize .Name}}
}
	{{- else }}
// Get{{capitalize .Name}} returns {{json .Name}}
func (t *{{$structName}}) Get{{capitalize .Name}}() {{resolveType .Type}} {
	if t == nil {
		return {{zeroValue .Type}}
	}
	return t.{{capitalize .Name}}
}
	{{- end }}
	{{- end }}
{{- end }}


`
	if tpl, err = template.New("struct").Funcs(template.FuncMap{
		"capitalize": xstrings.FirstRuneToUpper,
		"json":       func(s string) string { return "`json:\"" + s + "\"`" },
		"visible":    shouldFieldDisplay,
		"zeroValue":  zeroValue,
		"resolveType": func(s FieldType) string {
			if s == FieldTypeInt {
				return intType
			}
			return string(s)
		},
	}).Parse(tmpl); err != nil {
		return
	}
	var buf bytes.Buffer
	if err = tpl.Execute(&buf, struct {
		PackageName string
		Sheet
	}{Sheet: *sheet, PackageName: packageName}); err != nil {
		return
	}
	output, err = format.Source(buf.Bytes())
	return
}

func genInterface(sheet *Sheet, shouldFieldDisplay func(*Field) bool) (output []byte, err error) {
	var tpl *template.Template
	tmpl := `// {{capitalize .Name}}Tpl is auto-generated interface
// Reference file {{.FileName}}.
// DO NOT EDIT THIS FILE MANUALLY
// This file is generated by github.com/8liang/kit/excel
export interface {{capitalize .Name}}Tpl {
{{- range .Fields }}
 	{{- if visible . }}
	{{- $field := . }}
	{{- if eq .Type "array" }}
	{{- with index .SubFields 0 }}
	{{ .Name }}: Array<{{ resolveTsType .Type }}>
	{{- end }}
	{{- else if eq .Type "objectArray" }}
	{{ $field.Name }}: Array<{
	{{- range .SubFields }}
	{{- if visible . }}
		{{ .Name }}: {{ resolveTsType .Type }}
	{{- end }}
	{{- end }}
	}>
	{{- else }}
	{{ .Name }}: {{ resolveTsType .Type }}
	{{- end }}
	{{- end }}
{{- end }}
}
`
	if tpl, err = template.New("interface").Funcs(template.FuncMap{
		"capitalize":    xstrings.FirstRuneToUpper,
		"resolveTsType": resolveTsType,
		"visible":       shouldFieldDisplay,
	}).Parse(tmpl); err != nil {
		return
	}
	var buf bytes.Buffer
	err = tpl.Execute(&buf, sheet)
	output = buf.Bytes()
	return
}

func resolveTsType(fieldType FieldType) string {
	switch fieldType {
	case FieldTypeInt, FieldTypeFloat:
		return "number"
	default:
		return "string"
	}
}

func zeroValue(typ FieldType) string {
	switch typ {
	case "int", "int32", "int64":
		return "0"
	case "float32", "float64":
		return "0.0"
	case "string":
		return `""`
	case "bool":
		return "false"
	default:
		// 默认返回 nil，适用于切片、指针、接口等
		return "nil"
	}
}
